{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","cats","clickedCatIds","score","goal","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Score_Score","components_Wrapper_Wrapper","map","kitty","components_Card_Card","key","href","target","rel","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.49b2cd08.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card img-container hover\">\r\n    <img alt={props.name} src={(props.image)} id={props.id}\r\n      onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore' />\r\n  </div>\r\n);\r\n\r\nexport default Card;","\r\nimport React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n//stateless component\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","    \r\nimport React from \"react\";\r\nimport \"./Score.css\";\r\n//import Arrow from 'react-icons/lib/fa/caret-right';\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\"> Your Score: {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport cats from \"./cards.json\";\nimport './App.css';\n\nclass App extends Component {\n  // Setting this.state.cats to the cards json array\n  state = {\n    cats,\n    clickedCatIds: [],\n    score: 0,\n    goal: 8,\n    status: \"\"\n  };\n\n  //shuffle the pup cards in the browser when clicked\n  shuffleScoreCard = id => {\n    let clickedCatIds = this.state.clickedCatIds;\n\n    if(clickedCatIds.includes(id)){\n      this.setState({ clickedCatIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n      return;\n    }else{\n      clickedCatIds.push(id)\n\n      if(clickedCatIds.length === 8){\n        this.setState({score: 8, status: \"You Won! Great Job! Click to play again!\", clickedCatIds: []});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ cats, clickedCatIds, score: clickedCatIds.length, status: \" \" });\n\n      for (let i = cats.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [cats[i], cats[j]] = [cats[j], cats[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Clicky Cats</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice! Click all the images ONLY once and you win!\n          </p>\n        </header>\n        <Score total={this.state.score}\n               goal={8}\n               status={this.state.status}\n               />\n        <Wrapper>\n          {this.state.cats.map(kitty => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={kitty.id}\n              key={kitty.id}\n              image={kitty.image}\n            />\n          ))}\n        </Wrapper>\n        <footer>\n          <p> Â© Rayna McGinnis |<a href=\"https://raynamcginnis.github.io/Clicky-Game/\" target=\"_blank\" rel=\"noopener noreferrer\"> View on Github</a>.</p>\n        </footer>\n    </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}